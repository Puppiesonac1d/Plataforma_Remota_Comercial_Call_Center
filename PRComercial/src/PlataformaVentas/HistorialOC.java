/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PlataformaVentas;

import clases.Conexion;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import net.proteanit.sql.DbUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author The_S
 */
public class HistorialOC extends javax.swing.JFrame {

    Conexion con = new Conexion();
    Connection cn = con.conecta();

    public HistorialOC() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        tblHistorialOC3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        btnVolverMenu9 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOC = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        b_Titulo = new javax.swing.JLabel();
        lblCodigoMenu = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtFiltrarOC = new javax.swing.JTextField();
        btnBuscarPorOC = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNombreDemandante = new javax.swing.JTextField();
        btnBuscarNombreDemandante = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtNombreEjecutivo = new javax.swing.JTextField();
        btnBuscarPorNombreEjecutivo = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        btnBuscarFecha = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnGenerarPDFNV = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBDD = new javax.swing.JTable();
        btnDetalleNV = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 740));
        setMinimumSize(new java.awt.Dimension(1280, 740));

        jPanel1.setBackground(new java.awt.Color(252, 252, 252));

        tblHistorialOC3 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int celIndex){
                return false;
            }
        };
        tblHistorialOC3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane22.setViewportView(tblHistorialOC3);

        jButton3.setBackground(new java.awt.Color(0, 153, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton3.setText("Exportar Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton11.setText("Consultar Mercado Público");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        btnVolverMenu9.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnVolverMenu9.setText("Volver");
        btnVolverMenu9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverMenu9ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(27, 195, 225));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton2.setText("Crear Nota de Venta Privada");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setVisible(false);

        tblOC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Código / ID licitación CM", "Producto", "Cantidad", "Moneda", "Precio Unitario", "Descuento", "Cargos", "Valor Total"
            }
        ));
        tblOC.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblOC);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PlataformaVentas/Imagenes/acima-logo-200p.png"))); // NOI18N

        b_Titulo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        b_Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        b_Titulo.setText("Historial de Notas de Venta");

        lblCodigoMenu.setVisible(false);
        lblCodigoMenu.setText("0");

        jLabel2.setText("Código de Orden de Compra:");

        btnBuscarPorOC.setText("Buscar");
        btnBuscarPorOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorOCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFiltrarOC, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorOC)
                .addContainerGap(533, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFiltrarOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorOC))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Filtrar por Código de Orden de Compra", jPanel3);

        jLabel3.setText("Nombre del Demandante:");

        btnBuscarNombreDemandante.setText("Buscar");
        btnBuscarNombreDemandante.setToolTipText("");
        btnBuscarNombreDemandante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreDemandanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombreDemandante, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarNombreDemandante)
                .addContainerGap(550, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombreDemandante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarNombreDemandante))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Filtrar por Nombre del Demandante", jPanel4);

        jLabel4.setText("Nombre del Ejecutivo:");
        jLabel4.setToolTipText("");

        btnBuscarPorNombreEjecutivo.setText("Buscar");
        btnBuscarPorNombreEjecutivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorNombreEjecutivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombreEjecutivo, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorNombreEjecutivo)
                .addContainerGap(513, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombreEjecutivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorNombreEjecutivo))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Filtrar por Ejecutivo", jPanel5);

        txtFecha.setDateFormatString("yyyy-MM-dd");

        jLabel5.setText("Fecha:");

        btnBuscarFecha.setText("Buscar");
        btnBuscarFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarFecha)
                .addContainerGap(610, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBuscarFecha)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Filtrar por Fecha", jPanel6);

        jButton1.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        jButton1.setText("Reiniciar Filtros");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jTabbedPane1.addTab("Reiniciar Filtros", jButton1);

        btnGenerarPDFNV.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnGenerarPDFNV.setText("Imprimir OC / NV");
        btnGenerarPDFNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDFNVActionPerformed(evt);
            }
        });

        jScrollPane2.setVisible(false);

        tblBDD.setVisible(true);
        tblBDD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblBDD);

        btnDetalleNV.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnDetalleNV.setText("Detalle de Nota de Venta");
        btnDetalleNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalleNVActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton4.setText("Modificar Dirección de Despacho");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCodigoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDetalleNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGenerarPDFNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnVolverMenu9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(b_Titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDetalleNV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerarPDFNV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVolverMenu9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCodigoMenu))
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if (tblHistorialOC3.getSelectionModel().isSelectionEmpty() == true) {
            ConsultaMP consultar = new ConsultaMP();
            consultar.setVisible(true);
            consultar.lblCodigo.setText(lblCodigoMenu.getText());
            this.dispose();
        } else {
            int row = tblHistorialOC3.getSelectedRow();
            TableModel historialModel = tblHistorialOC3.getModel();
            ConsultaMP consulta = new ConsultaMP();
            consulta.setVisible(true);
            consulta.lblCodigo.setText(lblCodigoMenu.getText());
            consulta.txtOC.setText(historialModel.getValueAt(row, 1).toString());
            this.dispose();
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void btnVolverMenu9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverMenu9ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolverMenu9ActionPerformed

    private void btnBuscarPorOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorOCActionPerformed
        try {
            String query = "select idOrdenTrabajo as 'N° Nota de Venta', codigoOrdenCompra as 'Orden de Compra', rutCliente as 'Rut', demandante as 'Demandante',unidadCompra as 'Unidad de Compra',\n"
                    + "contactoOC as 'Nombre', ordentrabajo.emailEnvioFactura as 'Mail' ,ordentrabajo.telefono as 'Teléfono', neto as 'Neto', fechaEnvioOC as 'Fecha de Envío',fechaAceptacion as 'Fecha de Aceptación' ,usuario.nombreUsuario as 'Ejecutivo' \n"
                    + "from ordenTrabajo join usuario on ordenTrabajo.codigo_autorizacion = usuario.codigo_autorizacion "
                    + "WHERE ordenTrabajo.codigoOrdenCompra LIKE ?";
            String param = txtFiltrarOC.getText();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, param);
            java.sql.ResultSet rs = pst.executeQuery();
            tblHistorialOC3.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuscarPorOCActionPerformed

    private void btnBuscarNombreDemandanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreDemandanteActionPerformed
        try {
            String query = "select idOrdenTrabajo as 'N° Nota de Venta', codigoOrdenCompra as 'Orden de Compra', rutCliente as 'Rut', demandante as 'Demandante',unidadCompra as 'Unidad de Compra',\n"
                    + "contactoOC as 'Nombre', ordentrabajo.emailEnvioFactura as 'Mail' ,ordentrabajo.telefono as 'Teléfono', neto as 'Neto', fechaEnvioOC as 'Fecha de Envío',fechaAceptacion as 'Fecha de Aceptación' ,usuario.nombreUsuario as 'Ejecutivo' \n"
                    + "from ordenTrabajo join usuario on ordenTrabajo.codigo_autorizacion = usuario.codigo_autorizacion "
                    + "WHERE ordenTrabajo.demandante RLIKE ?";
            String param = txtNombreDemandante.getText();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, param);
            java.sql.ResultSet rs = pst.executeQuery();
            tblHistorialOC3.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuscarNombreDemandanteActionPerformed

    private void btnBuscarPorNombreEjecutivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorNombreEjecutivoActionPerformed
        try {
            String query = "select idOrdenTrabajo as 'N° Nota de Venta', codigoOrdenCompra as 'Orden de Compra', rutCliente as 'Rut', demandante as 'Demandante',unidadCompra as 'Unidad de Compra',\n"
                    + "contactoOC as 'Nombre', ordentrabajo.emailEnvioFactura as 'Mail' ,ordentrabajo.telefono as 'Teléfono', neto as 'Neto', fechaEnvioOC as 'Fecha de Envío',fechaAceptacion as 'Fecha de Aceptación' ,usuario.nombreUsuario as 'Ejecutivo' \n"
                    + "from ordenTrabajo join usuario on ordenTrabajo.codigo_autorizacion = usuario.codigo_autorizacion "
                    + "WHERE usuario.nombreUsuario RLIKE ?";
            String param = txtNombreEjecutivo.getText();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, param);
            java.sql.ResultSet rs = pst.executeQuery();
            tblHistorialOC3.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuscarPorNombreEjecutivoActionPerformed

    private void btnBuscarFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFechaActionPerformed
        Date date = txtFecha.getDate();
        String pattern = "yyyy-MM-dd";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        String strDate = simpleDateFormat.format(date);
        System.out.println(strDate);
        try {
            String query = "select idOrdenTrabajo as 'N° Nota de Venta', codigoOrdenCompra as 'Orden de Compra', rutCliente as 'Rut', demandante as 'Demandante',unidadCompra as 'Unidad de Compra',\n"
                    + "contactoOC as 'Nombre', ordentrabajo.emailEnvioFactura as 'Mail' ,ordentrabajo.telefono as 'Teléfono', neto as 'Neto', fechaEnvioOC as 'Fecha de Envío',fechaAceptacion as 'Fecha de Aceptación' ,usuario.nombreUsuario as 'Ejecutivo' \n"
                    + "from ordenTrabajo join usuario on ordenTrabajo.codigo_autorizacion = usuario.codigo_autorizacion "
                    + "WHERE ordenTrabajo.fechaEnvioOC RLIKE ?";
            String param = txtNombreEjecutivo.getText();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, strDate);
            java.sql.ResultSet rs = pst.executeQuery();
            tblHistorialOC3.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuscarFechaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String query = "select idOrdenTrabajo as 'N° Nota de Venta', codigoOrdenCompra as 'Orden de Compra', rutCliente as 'Rut', demandante as 'Demandante',unidadCompra as 'Unidad de Compra',\n"
                    + "contactoOC as 'Nombre', ordentrabajo.emailEnvioFactura as 'Mail' ,ordentrabajo.telefono as 'Teléfono', neto as 'Neto', fechaEnvioOC as 'Fecha de Envío',fechaAceptacion as 'Fecha de Aceptación' ,usuario.nombreUsuario as 'Ejecutivo' \n"
                    + "from ordenTrabajo join usuario on ordenTrabajo.codigo_autorizacion = usuario.codigo_autorizacion ;";
            PreparedStatement pst;
            pst = cn.prepareStatement(query);
            java.sql.ResultSet rs = pst.executeQuery();
            tblHistorialOC3.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        NotaVenta notaVenta = new NotaVenta();
        notaVenta.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {

            String ruta = "";

            JFileChooser dlg = new JFileChooser();
            dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int option = dlg.showOpenDialog(this);

            if (option == JFileChooser.APPROVE_OPTION) {
                File f = dlg.getSelectedFile();
                ruta = f.toString();
            }
            //Fecha
            Date sistFecha = new Date();
            SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
            Date sistHora = new Date();
            String pmAm = "hh:mm a";
            SimpleDateFormat format = new SimpleDateFormat(pmAm);
            Calendar hoy = Calendar.getInstance();
            String hora = (String.format(format.format(sistHora), hoy));
            hora = hora.replace(":", "-");

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Notas de Venta");

            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 14);
            headerFont.setColor(IndexedColors.RED.getIndex());

            CellStyle headerCellStyle = workbook.createCellStyle();
            headerCellStyle.setFont(headerFont);

            // Create a Row
            Row headerRow = sheet.createRow(0);

            for (int i = 0; i < tblHistorialOC3.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(tblHistorialOC3.getColumnName(i));
                cell.setCellStyle(headerCellStyle);
            }

            // Create Other rows and cells with contacts data
            int rowNum = 1;

            for (int i = 0; i < tblHistorialOC3.getRowCount(); i++) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(tblHistorialOC3.getValueAt(i, 0).toString());
                row.createCell(1).setCellValue(tblHistorialOC3.getValueAt(i, 1).toString());
                row.createCell(2).setCellValue(tblHistorialOC3.getValueAt(i, 2).toString());
                row.createCell(3).setCellValue(tblHistorialOC3.getValueAt(i, 3).toString());
                row.createCell(4).setCellValue(tblHistorialOC3.getValueAt(i, 4).toString());
                row.createCell(5).setCellValue(tblHistorialOC3.getValueAt(i, 5).toString());
                row.createCell(6).setCellValue(tblHistorialOC3.getValueAt(i, 6).toString());
                row.createCell(7).setCellValue(tblHistorialOC3.getValueAt(i, 7).toString());
                row.createCell(8).setCellValue(tblHistorialOC3.getValueAt(i, 8).toString());
                row.createCell(9).setCellValue(tblHistorialOC3.getValueAt(i, 9).toString());
                row.createCell(10).setCellValue(tblHistorialOC3.getValueAt(i, 10).toString());
                row.createCell(11).setCellValue(tblHistorialOC3.getValueAt(i, 11).toString());

            }

            // Resize all columns to fit the content size
            for (int i = 0; i < tblHistorialOC3.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }

            try ( // Write the output to a file
                    FileOutputStream fileOut = new FileOutputStream(ruta + "\\" + "reporte_notas_venta_fecha_" + formato.format(sistFecha) + "_hora_" + hora + ".xlsx")) {
                workbook.write(fileOut);
            }
            JOptionPane.showMessageDialog(null, "Documento Creado");
        } catch (HeadlessException | IOException ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnGenerarPDFNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDFNVActionPerformed

        try {
            int index = tblHistorialOC3.getSelectedRow();
            //código de orden de compra
            String oc = tblHistorialOC3.getValueAt(index, 1).toString();
            //Variables
            String fechaEnvioOC = "";
            String estadoOC = "";
            String unidadCompra = "";
            String rutComprador = "";
            String direccionDemandante = "";
            String demandante = "";
            String telefonoDemandante = "";
            String emailContacto = "";
            String nombreProveedor = "";
            String direccionProveedor = "";
            String rutProveedor = "";
            String nombreContactoProveedor = "";
            String fonoProveedor = "";
            String fechaAceptacion = "";
            String nombreOC = "";
            String direccionDespacho = "";
            String direccionEnvioFactura = "";
            String metodoDespacho = "";
            String contactoPago = "";
            String formaPago = "";
            String contactoOC = "";
            String netoOC = "";
            String dctoOC = "";
            String cargosOC = "";
            String subTotalOC = "";
            String ivaOC = "";
            String impuestoEspecificoOC = "";
            String totalOC = "";
            String observacionOC = "";

            //En esta sección se ingresa el Request para que la "API", digamosle así xd y posteriormente entrega el resultado del mismo.
            String format = "xml";
            String url = "http://api.mercadopublico.cl/servicios/v1/publico/ordenesdecompra.xml?codigo=" + oc + "&ticket=210555F9-8B7E-48ED-93ED-2504CAD3B155";
            System.out.println(url);
            //Se crea un obj de tipo url con el cual se realizará el request
            URL obj;

            obj = new URL(url);

            HttpURLConnection con;

            con = (HttpURLConnection) obj.openConnection();

            int responseCode;

            responseCode = con.getResponseCode();

            //Por motivos de Debug, se necesita el codigo de respuesta
            System.out.println("Código de Respuesta : " + responseCode);
            StringBuffer response = null;
            try (BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8))) {
                String inputLine;
                response = new StringBuffer();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
            } catch (IOException ex) {
                Logger.getLogger(HistorialOC.class.getName()).log(Level.SEVERE, null, ex);
            }
            //print in String
            // System.out.println(response.toString());
            org.w3c.dom.Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(response.toString())));
            //Aqui segun el TAG del XML va a poder obtener los elementos...
            //Obedeciendo el orden del documento, los tags son los siguientes...

            NodeList ordenes = doc.getElementsByTagName("Ordenes");
            if (ordenes.getLength() > 0) {
                Element err = (Element) ordenes.item(0);
                fechaEnvioOC = err.getElementsByTagName("FechaCreacion").item(0).getTextContent();
                estadoOC = err.getElementsByTagName("Estado").item(0).getTextContent();
                unidadCompra = err.getElementsByTagName("NombreUnidad").item(0).getTextContent();

            } else {
                // success
            }

            NodeList comprador = doc.getElementsByTagName("Comprador");
            if (comprador.getLength() > 0) {
                Element err = (Element) comprador.item(0);
                rutComprador = err.getElementsByTagName("RutUnidad").item(0).getTextContent();
                direccionDemandante = err.getElementsByTagName("DireccionUnidad").item(0).getTextContent();
                demandante = err.getElementsByTagName("NombreOrganismo").item(0).getTextContent();
                telefonoDemandante = err.getElementsByTagName("FonoContacto").item(0).getTextContent();
                emailContacto = err.getElementsByTagName("MailContacto").item(0).getTextContent();
            } else {
                // success
            }

            NodeList proveedor = doc.getElementsByTagName("Proveedor");
            if (proveedor.getLength() > 0) {
                Element err = (Element) proveedor.item(0);
                nombreProveedor = err.getElementsByTagName("Nombre").item(0).getTextContent();
                direccionProveedor = err.getElementsByTagName("Direccion").item(0).getTextContent();
                rutProveedor = err.getElementsByTagName("RutSucursal").item(0).getTextContent();
                nombreContactoProveedor = err.getElementsByTagName("NombreContacto").item(0).getTextContent();
                fonoProveedor = err.getElementsByTagName("FonoContacto").item(0).getTextContent();
            } else {
                // success
            }

            NodeList fechas = doc.getElementsByTagName("Fechas");
            if (fechas.getLength() > 0) {
                Element err = (Element) fechas.item(0);
                fechaEnvioOC = err.getElementsByTagName("FechaCreacion").item(0).getTextContent();
                fechaAceptacion = err.getElementsByTagName("FechaAceptacion").item(0).getTextContent();
            } else {
                // success
            }

            NodeList detalleOrden = doc.getElementsByTagName("OrdenCompra");
            if (detalleOrden.getLength() > 0) {
                Element err = (Element) detalleOrden.item(0);
                nombreOC = (err.getElementsByTagName("Nombre").item(0).getTextContent());
                direccionDespacho = (err.getElementsByTagName("DireccionUnidad").item(0).getTextContent() + " "
                        + err.getElementsByTagName("ComunaUnidad").item(0).getTextContent() + " " + err.getElementsByTagName("RegionUnidad").item(0).getTextContent());
                direccionEnvioFactura = err.getElementsByTagName("DireccionUnidad").item(0).getTextContent() + " "
                        + err.getElementsByTagName("ComunaUnidad").item(0).getTextContent() + " "
                        + err.getElementsByTagName("RegionUnidad").item(0).getTextContent();
                metodoDespacho = err.getElementsByTagName("TipoDespacho").item(0).getTextContent();
                contactoPago = err.getElementsByTagName("NombreContacto").item(0).getTextContent() + " "
                        + err.getElementsByTagName("FonoContacto").item(0).getTextContent() + " "
                        + err.getElementsByTagName("MailContacto").item(0).getTextContent();
                formaPago = err.getElementsByTagName("FormaPago").item(0).getTextContent();
                contactoOC = err.getElementsByTagName("NombreContacto").item(0).getTextContent();
            } else {
                // success
            }

            NodeList flowList0 = doc.getElementsByTagName("Listado");
            Element err1 = (Element) flowList0.item(0);
            int num = Integer.parseInt(err1.getElementsByTagName("Cantidad").item(0).getTextContent());
            System.out.println(num + "");
            NodeList flowList1 = doc.getElementsByTagName("Listado");
            DefaultTableModel modelo = (DefaultTableModel) tblOC.getModel();

            for (int m = 0; m < tblOC.getRowCount(); m++) {
                modelo.removeRow(m);
            }
            modelo.setRowCount(num);
            for (int x = 0; x < num; x++) {
                System.out.println("Listado " + flowList1.getLength());

                NodeList flowList = doc.getElementsByTagName("Item");
                for (int i = 0; i < flowList.getLength(); i++) {
                    Element err = (Element) flowList.item(x);

                    String str = err.getElementsByTagName("EspecificacionComprador").item(0).getTextContent();
                    if (str.contains("(") && str.contains(")")) {
                        //Contiene o no
                        String answer = str.substring(str.indexOf("(") + 1, str.indexOf(")"));
                        modelo.setValueAt(answer, x, 0);
                    } else {
                        modelo.setValueAt("-", x, 0);
                    }

                    modelo.setValueAt(err.getElementsByTagName("EspecificacionComprador").item(0).getTextContent(), x, 1);
                    modelo.setValueAt(err.getElementsByTagName("Cantidad").item(0).getTextContent(), x, 2);
                    modelo.setValueAt(err.getElementsByTagName("Moneda").item(0).getTextContent(), x, 3);
                    modelo.setValueAt(err.getElementsByTagName("PrecioNeto").item(0).getTextContent(), x, 4);
                    modelo.setValueAt(err.getElementsByTagName("TotalDescuentos").item(0).getTextContent(), x, 5);
                    modelo.setValueAt(err.getElementsByTagName("TotalCargos").item(0).getTextContent(), x, 6);
                    modelo.setValueAt(err.getElementsByTagName("Total").item(0).getTextContent(), x, 7);
                }
            }

            NodeList detalleMontos = doc.getElementsByTagName("OrdenCompra");

            if (detalleMontos.getLength()
                    > 0) {
                Element err = (Element) detalleMontos.item(0);
                netoOC = ("$" + err.getElementsByTagName("TotalNeto").item(0).getTextContent());
                dctoOC = ("$" + err.getElementsByTagName("Descuentos").item(0).getTextContent());
                cargosOC = ("$" + err.getElementsByTagName("Cargos").item(0).getTextContent());
                subTotalOC = (Integer.toString(Integer.parseInt(netoOC.substring(1)) - Integer.parseInt(dctoOC.substring(1))));
                ivaOC = ("$" + err.getElementsByTagName("Impuestos").item(0).getTextContent());
                impuestoEspecificoOC = ("$" + err.getElementsByTagName("TotalImpuestos").item(0).getTextContent());
                totalOC = ("$" + err.getElementsByTagName("Total").item(0).getTextContent());

            } else {
                // success
            }
            NodeList descripcion = doc.getElementsByTagName("OrdenCompra");

            if (descripcion.getLength()
                    > 0) {
                Element err = (Element) descripcion.item(0);
                observacionOC = (err.getElementsByTagName("Descripcion").item(0).getTextContent());
            } else {
                // success
            }
            System.out.println("La consulta fue realizada con éxito");

            //Consultar Tabla de notas de venta a partir de la OC
            try {
                String query = "Select idOrden as 'N° de NV', \n"
                        + "codigoOrdenCompra as 'Código Orden Compra',\n"
                        + "codigoProducto as 'Código / ID licitación',\n"
                        + "nombreProducto as 'Producto',\n"
                        + "cantidad as 'Cantidad',\n"
                        + "moneda as 'Moneda',\n"
                        + "precioUnitario as 'Precio Unitario',\n"
                        + "descuento as 'Descuento',\n"
                        + "cargos as 'Cargos',\n"
                        + "valorTotal as 'Total'\n"
                        + "from detalleordentrabajo\n"
                        + "where codigoOrdenCompra = ?;";
                String param = oc;
                PreparedStatement pst = cn.prepareStatement(query);
                pst.setString(1, param);
                java.sql.ResultSet rs = pst.executeQuery();
                tblBDD.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex);
            }

            //Impresion del PDF
            String ruta = "";

            JFileChooser dlg = new JFileChooser();
            dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int option = dlg.showOpenDialog(this);

            if (option == JFileChooser.APPROVE_OPTION) {
                File f = dlg.getSelectedFile();
                ruta = f.toString();
            }

            //Fecha
            Date sistFecha = new Date();
            SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
            //Crear PDF
            try {
                Document docPDF = new Document(PageSize.A4);

                Date sistHora = new Date();
                String pmAm = "hh:mm a";
                SimpleDateFormat formatPDF = new SimpleDateFormat(pmAm);
                Calendar hoy = Calendar.getInstance();
                String horaPDF = (String.format(formatPDF.format(sistHora), hoy));
                horaPDF = horaPDF.replace(":", "-");
                PdfWriter writer = PdfWriter.getInstance(docPDF, new FileOutputStream(ruta + "\\" + oc + "_Fecha_" + formato.format(sistFecha) + "_hora_" + horaPDF + "_Nota_de_Venta_" + ".pdf"));

                //Separador
                PdfPTable myTable = new PdfPTable(1);
                myTable.setWidthPercentage(100.0f);
                PdfPCell myCell = new PdfPCell(new Paragraph(""));
                myCell.setBorder(Rectangle.BOTTOM);
                myTable.addCell(myCell);
                myTable.setSpacingAfter(10f);
                myTable.setSpacingBefore(10f);

                docPDF.open();

                //Añadir la imagen
                try {
                    Image logoAcima = Image.getInstance("src\\PlataformaVentas\\Imagenes\\acima-logo-200p.png");
                    logoAcima.scaleAbsolute(126, 67);
                    logoAcima.setAlignment(Paragraph.ALIGN_RIGHT);
                    docPDF.add(logoAcima);

                    docPDF.add(myTable);

                } catch (BadElementException ex) {
                    Logger.getLogger(OrdenTrabajo.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (IOException ex) {
                    Logger.getLogger(OrdenTrabajo.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                Paragraph titulo = new Paragraph("Información del demandante", FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.BOLD, null));
                docPDF.add(titulo);

                PdfPTable tableDatos = new PdfPTable(2);
                tableDatos.setWidthPercentage(100);
                tableDatos.addCell(new Phrase("Rut del Demandante: " + rutComprador, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.addCell(new Phrase("Demandante: " + demandante, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.addCell(new Phrase("Dirección del Demandante: " + direccionDemandante, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.addCell(new Phrase("Unidad de Compra: " + unidadCompra, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.addCell(new Phrase("Teléfono del Demandante: " + telefonoDemandante, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.addCell(new Phrase("Fecha de Envío de Nota de OC: " + fechaEnvioOC, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos.setSpacingBefore(15f);
                tableDatos.setWidthPercentage(100);
                Paragraph alineaDatos = new Paragraph();
                alineaDatos.add(tableDatos);
                docPDF.add(alineaDatos);

                docPDF.add(myTable);

                Paragraph titulo2 = new Paragraph("Información de la empresa", FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.BOLD, null));
                docPDF.add(titulo2);

                Paragraph proveedorParagraph = new Paragraph("Proveedor: " + nombreProveedor, FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.NORMAL, null));
                proveedorParagraph.setAlignment(Paragraph.ALIGN_LEFT);
                docPDF.add(proveedorParagraph);

                docPDF.add(myTable);

                Paragraph titulo3 = new Paragraph("Información de orden", FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.NORMAL, null));
                docPDF.add(titulo);

                PdfPTable tableDatos2 = new PdfPTable(2);
                tableDatos2.setWidthPercentage(100);
                tableDatos2.addCell(new Phrase("Nombre de la Orden de Compra: " + nombreOC, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Metodo de Despacho: " + metodoDespacho, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Fecha de aceptación: " + fechaAceptacion, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Forma de Pago: " + formaPago, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Direcciones de despacho: " + direccionDespacho, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Contacto de pago: " + contactoPago, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Direcciones de envio de factura: " + direccionEnvioFactura, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Contacto de OC: " + contactoOC, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Mail de Envío de Factura: " + emailContacto, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.addCell(new Phrase("Código de Orden de Compra: " + oc, FontFactory.getFont(FontFactory.TIMES, 12)));
                tableDatos2.setSpacingBefore(15f);
                tableDatos2.setWidthPercentage(100);
                Paragraph alineaDatos2 = new Paragraph();
                alineaDatos2.add(tableDatos2);
                docPDF.add(alineaDatos2);

                docPDF.add(myTable);

                //docPDF.setPageSize(PageSize.A4.rotate());
                //docPDF.newPage();
                Paragraph tablas = new Paragraph("Información de productos en la orden ", FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.BOLD, null));
                docPDF.add(tablas);
                PdfPTable pdfTable = new PdfPTable(tblOC.getColumnCount());
                pdfTable.setSpacingBefore(15f);
                pdfTable.setWidthPercentage(100);
                for (int i = 0; i < tblOC.getColumnCount(); i++) {
                    pdfTable.addCell(new Phrase(tblOC.getColumnName(i), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                }
                for (int rows = 0; rows < tblOC.getRowCount(); rows++) {
                    pdfTable.addCell(new Phrase(tblOC.getModel().getValueAt(rows, 0).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable.addCell(new Phrase(tblOC.getModel().getValueAt(rows, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable.addCell(new Phrase(tblOC.getModel().getValueAt(rows, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable.addCell(new Phrase(tblOC.getModel().getValueAt(rows, 3).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int precio = Integer.parseInt(tblOC.getModel().getValueAt(rows, 4).toString());
                    String precioFormat = (java.text.NumberFormat.getCurrencyInstance().format(precio));
                    precioFormat = precioFormat.substring(2);

                    pdfTable.addCell(new Phrase(precioFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int descuento = Integer.parseInt(tblOC.getModel().getValueAt(rows, 5).toString());
                    String descuentoFormat = (java.text.NumberFormat.getCurrencyInstance().format(descuento));
                    descuentoFormat = descuentoFormat.substring(2);

                    pdfTable.addCell(new Phrase(descuentoFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int cargo = Integer.parseInt(tblOC.getModel().getValueAt(rows, 6).toString());
                    String cargoFormat = (java.text.NumberFormat.getCurrencyInstance().format(cargo));
                    cargoFormat = cargoFormat.substring(2);

                    pdfTable.addCell(new Phrase(cargoFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int total = Integer.parseInt(tblOC.getModel().getValueAt(rows, 7).toString());
                    String totalFormat = (java.text.NumberFormat.getCurrencyInstance().format(total));
                    totalFormat = totalFormat.substring(2);

                    pdfTable.addCell(new Phrase(totalFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                }

                docPDF.add(pdfTable);

                int netoF = Integer.parseInt(netoOC.replace("$", ""));
                String formatNeto = java.text.NumberFormat.getCurrencyInstance().format(netoF);

                int ivaF = Integer.parseInt(ivaOC.replace("$", ""));
                String formatIva = java.text.NumberFormat.getCurrencyInstance().format(ivaF);

                int totalF = Integer.parseInt(totalOC.replace("$", ""));
                String formatTotal = java.text.NumberFormat.getCurrencyInstance().format(totalF);

                Paragraph neto = new Paragraph("Neto: " + formatNeto.substring(2), FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.NORMAL, null));
                neto.setAlignment(Paragraph.ALIGN_RIGHT);
                Paragraph iva = new Paragraph("IVA: " + formatIva.substring(2), FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.NORMAL, null));
                iva.setAlignment(Paragraph.ALIGN_RIGHT);
                Paragraph total = new Paragraph("Total: " + formatTotal.substring(2), FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.NORMAL, null));
                total.setAlignment(Paragraph.ALIGN_RIGHT);
                docPDF.add(neto);
                docPDF.add(iva);
                docPDF.add(total);

                docPDF.add(myTable);

                //doc.newPage();
                //Para las notas de venta
                Paragraph tablas2 = new Paragraph("Información de productos en notas de venta ", FontFactory.getFont(FontFactory.TIMES, 12, com.itextpdf.text.Font.BOLD, null));
                docPDF.add(tablas2);
                PdfPTable pdfTable2 = new PdfPTable(tblBDD.getColumnCount());
                pdfTable2.setSpacingBefore(15f);
                pdfTable2.setWidthPercentage(100);
                for (int i = 0; i < tblBDD.getColumnCount(); i++) {
                    pdfTable2.addCell(new Phrase(tblBDD.getColumnName(i), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                }
                for (int rows = 0; rows < tblBDD.getRowCount(); rows++) {
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 0).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 3).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 4).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
                    pdfTable2.addCell(new Phrase(tblBDD.getModel().getValueAt(rows, 5).toString(), FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int precio = Integer.parseInt(tblBDD.getModel().getValueAt(rows, 6).toString());
                    String precioFormat = (java.text.NumberFormat.getCurrencyInstance().format(precio));
                    precioFormat = precioFormat.substring(2);

                    pdfTable2.addCell(new Phrase(precioFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int descuento = Integer.parseInt(tblBDD.getModel().getValueAt(rows, 7).toString());
                    String descuentoFormat = (java.text.NumberFormat.getCurrencyInstance().format(descuento));
                    descuentoFormat = descuentoFormat.substring(2);

                    pdfTable2.addCell(new Phrase(descuentoFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int cargos = Integer.parseInt(tblBDD.getModel().getValueAt(rows, 8).toString());
                    String cargosFormat = (java.text.NumberFormat.getCurrencyInstance().format(cargos));
                    cargosFormat = cargosFormat.substring(2);

                    pdfTable2.addCell(new Phrase(cargosFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                    int totalProd = Integer.parseInt(tblBDD.getModel().getValueAt(rows, 9).toString());
                    String totalFormat = (java.text.NumberFormat.getCurrencyInstance().format(totalProd));
                    totalFormat = totalFormat.substring(2);

                    pdfTable2.addCell(new Phrase(totalFormat, FontFactory.getFont(FontFactory.HELVETICA, 8)));

                }
                docPDF.add(pdfTable2);

                docPDF.add(myTable);
                //Iconos
                try {
                    PdfPTable table = new PdfPTable(2);
                    table.setWidths(new int[]{1, 12});
                    table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                    //D:\Plataforma Operaciones\src\imagenes\465892689e(1).png
                    Image img1 = Image.getInstance("src\\PlataformaVentas\\Imagenes\\phone-icon-11-64.png");
                    Image img2 = Image.getInstance("src\\PlataformaVentas\\Imagenes\\mail-64.png");

                    PdfPCell imagen1 = new PdfPCell(img1, false);
                    imagen1.setBorder(Rectangle.NO_BORDER);
                    imagen1.setBackgroundColor(BaseColor.WHITE);
                    imagen1.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);

                    PdfPCell imagen2 = new PdfPCell(img2, false);
                    imagen2.setBorder(Rectangle.NO_BORDER);
                    imagen2.setBackgroundColor(BaseColor.WHITE);
                    imagen2.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);

                    table.addCell(imagen1);
                    table.addCell(new Phrase("Central telefónica: +56-232 107 900", FontFactory.getFont(FontFactory.TIMES, 12)));
                    table.addCell(imagen2);
                    table.addCell(new Phrase("ventas@acima.cl - comercial@acima.cl - gerencia@acima.cl", FontFactory.getFont(FontFactory.TIMES, 12)));
                    Paragraph tableFooter = new Paragraph();
                    tableFooter.add(table);
                    tableFooter.setSpacingBefore(15f);
                    tableFooter.setSpacingBefore(15f);
                    tableFooter.setAlignment(Paragraph.ALIGN_RIGHT);
                    docPDF.add(tableFooter);

                    docPDF.close();
                    JOptionPane.showMessageDialog(null, "PDF Generado Correctamente");

                } catch (BadElementException | IOException ex) {
                    Logger.getLogger(HistorialOC.class
                            .getName()).log(Level.SEVERE, null, ex);

                }
            } catch (IOException ex) {
                Logger.getLogger(HistorialOC.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex);
        }


    }//GEN-LAST:event_btnGenerarPDFNVActionPerformed

    private void btnDetalleNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalleNVActionPerformed
        try {
            int index = tblHistorialOC3.getSelectedRow();
            String valor = tblHistorialOC3.getValueAt(index, 1).toString();
            String valor2 = tblHistorialOC3.getValueAt(index, 0).toString();
            DetalleNotaVenta detalle = new DetalleNotaVenta();
            detalle.setVisible(true);
            detalle.txtConsultarOC.setText(valor);
            this.dispose();

            String tipoOrden = "";
            //JOptionPane.showMessageDialog(null, "La Orden de Compra se encuentra en la base de datos");
            //Consulta de BD
            String query = "SELECT * FROM acimabasededatos.ordentrabajo oc join detalleordentrabajo doc on oc.codigoordencompra = doc.codigoordencompra\n"
                    + "where oc.codigoOrdenCompra=?;";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, detalle.txtConsultarOC.getText());
            java.sql.ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                detalle.txtProveedorOC.setText(rs.getString("nombre_proveedor"));
                detalle.txtRutCompradorOC.setText(rs.getString("rutCliente"));
                detalle.txtDireccionDemandanteOC.setText(rs.getString("direcciondemandante"));
                detalle.txtTelefonoComprador.setText(rs.getString("telefono"));
                detalle.txtNombreDemandanteOC.setText(rs.getString("demandante"));
                detalle.txtUnidadCompraCliente.setText(rs.getString("unidadcompra"));
                detalle.txtFechaEnvioOc.setText(rs.getString("fechaenviooc"));
                detalle.txtEstadoOC.setText(rs.getString("codigoestado"));
                detalle.txtCodigoOCOT.setText(rs.getString("codigoordencompra"));
                detalle.txtNombreOrdenCompra.setText(rs.getString("nombreordencompra"));
                detalle.txtFechaAceptacion.setText(rs.getString("fechaAceptacion"));
                detalle.txtDireccionesDespachoOC.setText(rs.getString("direccionesdespacho"));
                detalle.txtDireccionEnvioFacturaOC.setText(rs.getString("direccionEnvioFactura"));
                detalle.txtMetodoDespachoOC.setText(rs.getString("tipoDespacho"));
                detalle.txtContactoPagoOC.setText(rs.getString("contactoPago"));
                detalle.txtFormaPagoOC.setText(rs.getString("FormaPago"));
                detalle.txtContactoOC.setText(rs.getString("contactoOC"));
                detalle.txtMailEnvioFactura.setText(rs.getString("emailEnvioFactura"));
                detalle.txtCargosOC.setText(rs.getString("doc.cargos"));
                detalle.txtNetoOC.setText(rs.getString("neto"));
                detalle.txtDCTOOC.setText(rs.getString("dcto"));
                detalle.txtSubtotalOC.setText(rs.getString("subtotal"));
                detalle.txtIVAOC.setText(rs.getString("iva"));
                detalle.txtImpuestoEspecifico.setText(rs.getString("impuestoEspecifico"));
                detalle.txtTotalOC.setText(rs.getString("total"));
            }

            int cargosOC = Integer.parseInt(detalle.txtCargosOC.getText().replace("$", ""));
            detalle.txtCargosOC.setText(java.text.NumberFormat.getCurrencyInstance().format(cargosOC));
            detalle.txtCargosOC.setText(detalle.txtCargosOC.getText().substring(2));

            int netoOC = Integer.parseInt(detalle.txtNetoOC.getText().replace("$", ""));
            detalle.txtNetoOC.setText(java.text.NumberFormat.getCurrencyInstance().format(netoOC));
            detalle.txtNetoOC.setText(detalle.txtNetoOC.getText().substring(2));

            int dctoOC = Integer.parseInt(detalle.txtDCTOOC.getText().replace("$", ""));
            detalle.txtDCTOOC.setText(java.text.NumberFormat.getCurrencyInstance().format(dctoOC));
            detalle.txtDCTOOC.setText(detalle.txtDCTOOC.getText().substring(2));

            int subtotalOC = Integer.parseInt(detalle.txtSubtotalOC.getText().replace("$", ""));
            detalle.txtSubtotalOC.setText(java.text.NumberFormat.getCurrencyInstance().format(subtotalOC));
            detalle.txtSubtotalOC.setText(detalle.txtSubtotalOC.getText().substring(2));

            int ivaOC = Integer.parseInt(detalle.txtIVAOC.getText().replace("$", ""));
            detalle.txtIVAOC.setText(java.text.NumberFormat.getCurrencyInstance().format(ivaOC));
            detalle.txtIVAOC.setText(detalle.txtIVAOC.getText().substring(2));

            int impuestoEspecificoOC = Integer.parseInt(detalle.txtImpuestoEspecifico.getText().replace("$", ""));
            detalle.txtImpuestoEspecifico.setText(java.text.NumberFormat.getCurrencyInstance().format(impuestoEspecificoOC));
            detalle.txtImpuestoEspecifico.setText(detalle.txtImpuestoEspecifico.getText().substring(2));

            int totalOC = Integer.parseInt(detalle.txtTotalOC.getText().replace("$", ""));
            detalle.txtTotalOC.setText(java.text.NumberFormat.getCurrencyInstance().format(totalOC));
            detalle.txtTotalOC.setText(detalle.txtTotalOC.getText().substring(2));

            String queryProducto = "Select idOrden as 'N° de NV', \n"
                    + "codigoOrdenCompra as 'Código Orden Compra',\n"
                    + "codigoProducto as 'Código / ID licitación',\n"
                    + "nombreProducto as 'Producto',\n"
                    + "cantidad as 'Cantidad',\n"
                    + "moneda as 'Moneda',\n"
                    + "precioUnitario as 'Precio Unitario',\n"
                    + "descuento as 'Descuento',\n"
                    + "cargos as 'Cargos',\n"
                    + "valorTotal as 'Total'\n"
                    + "from detalleordentrabajo\n"
                    + "where idOrden = ?;";
            PreparedStatement pstProd = cn.prepareStatement(queryProducto);
            pstProd.setInt(1, Integer.parseInt(valor2));
            java.sql.ResultSet rsProd = pstProd.executeQuery();
            detalle.tblResumenParcializada.setModel(DbUtils.resultSetToTableModel(rsProd));

            int precioUnitario = 0;
            int descuentoProducto = 0;
            int cargosProducto = 0;
            int totalProducto = 0;

            String pUnitarioFormat = "";
            String descFormat = "";
            String cargosProductoFormat = "";
            String totalProductoFormat = "";
            for (int x = 0; x < detalle.tblResumenParcializada.getRowCount(); x++) {
                precioUnitario = Integer.parseInt(detalle.tblResumenParcializada.getValueAt(x, 6).toString());
                pUnitarioFormat = java.text.NumberFormat.getCurrencyInstance().format(precioUnitario);
                detalle.tblResumenParcializada.setValueAt(pUnitarioFormat.substring(2), x, 6);

                descuentoProducto = Integer.parseInt(detalle.tblResumenParcializada.getValueAt(x, 7).toString());
                descFormat = java.text.NumberFormat.getCurrencyInstance().format(descuentoProducto);
                detalle.tblResumenParcializada.setValueAt(descFormat.substring(2), x, 7);

                cargosProducto = Integer.parseInt(detalle.tblResumenParcializada.getValueAt(x, 8).toString());
                cargosProductoFormat = java.text.NumberFormat.getCurrencyInstance().format(cargosProducto);
                detalle.tblResumenParcializada.setValueAt(cargosProductoFormat.substring(2), x, 8);

                totalProducto = Integer.parseInt(detalle.tblResumenParcializada.getValueAt(x, 9).toString());
                totalProductoFormat = java.text.NumberFormat.getCurrencyInstance().format(totalProducto);
                detalle.tblResumenParcializada.setValueAt(totalProductoFormat.substring(2), x, 9);
            }

            System.out.println("La consulta fue realizada con éxito");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una nota de venta de la lista" + ex.getMessage());
        }
    }//GEN-LAST:event_btnDetalleNVActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {

            int index = tblHistorialOC3.getSelectedRow();
            int valor = Integer.parseInt(tblHistorialOC3.getValueAt(index, 0).toString());

            String direccionOriginal = "";

            String queryDireccion = "Select direccionesDespacho from ordenTrabajo where idOrden = ?;";
            PreparedStatement pstProd = cn.prepareStatement(queryDireccion);
            pstProd.setInt(1, valor);
            java.sql.ResultSet rsProd = pstProd.executeQuery();
            while (rsProd.next()) {
                direccionOriginal = rsProd.getString(1);
            }

            String direccion = JOptionPane.showInputDialog("Dirección de despacho original: " + direccionOriginal);

            // create the java mysql update preparedstatement
            String query = "update ordentrabajo set direccionesDespacho = ? where idOrden = ?;";
            PreparedStatement preparedStmt = cn.prepareStatement(query);
            preparedStmt.setString(1, direccion);
            preparedStmt.setInt(2, valor);
            // execute the java preparedstatement
            preparedStmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se ha modificado la dirección de despacho a: " + direccion);
        } catch (SQLException ex) {
            Logger.getLogger(HistorialOC.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistorialOC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistorialOC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistorialOC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistorialOC.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistorialOC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel b_Titulo;
    private javax.swing.JButton btnBuscarFecha;
    private javax.swing.JButton btnBuscarNombreDemandante;
    private javax.swing.JButton btnBuscarPorNombreEjecutivo;
    private javax.swing.JButton btnBuscarPorOC;
    private javax.swing.JButton btnDetalleNV;
    private javax.swing.JButton btnGenerarPDFNV;
    private javax.swing.JButton btnVolverMenu9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JLabel lblCodigoMenu;
    private javax.swing.JTable tblBDD;
    public javax.swing.JTable tblHistorialOC3;
    private javax.swing.JTable tblOC;
    private com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JTextField txtFiltrarOC;
    private javax.swing.JTextField txtNombreDemandante;
    private javax.swing.JTextField txtNombreEjecutivo;
    // End of variables declaration//GEN-END:variables
}
